"""
General utility functions for the experiments.
"""

import re
import csv


def get_metrics_from_log_file(log_dir):
    """
    Reads and analyzes the log file generated by the application.

    Parameters:
    log_dir (str): The directory where the log files are located.

    Returns:
    dict: A dictionary containing the following keys:
        - proposals_made: A dictionary with the number of proposals made by each agent.
        - proposals_accepted: A dictionary with the number of proposals accepted by each agent.
        - proposals_confirmed: The total number of proposals confirmed.
        - unique_confirmed_proposals: A set of unique confirmed proposals.
        - deals_confirmed: A list of tuples containing proposal IDs and their deals.
        - results: A list of results from the results log file.
        - first_proposal_times: A dictionary with the first proposal made, accepted, and confirmed times.
    """

    LOG_FILE = f"{log_dir}/server.log"
    RESULTS_FILE = f"{log_dir}/results.log"

    proposals_made = {}
    proposals_accepted = {}
    proposals_confirmed = 0
    unique_confirmed_proposals = set()
    deals_confirmed = []
    first_proposal_times = {
        "made": None,
        "accepted": None,
        "confirmed": None,
    }
    current_time = None

    # Read the log file content
    with open(LOG_FILE, "r", encoding="utf-8") as file:
        content = file.read()

    # Split the content into individual messages
    messages = [message.strip() for message in re.split(r"\n{2,}", content)]
    unique_messages = set(messages)

    for message in unique_messages:
        # Extract current time
        if "Current time:" in message:
            current_time = re.search(r"Current time: (\d+)", message).group(1)

        # Extract proposals made by each agent
        if "particle: PROPOSE" in message:
            agent = re.search(r"from: (\w+)", message).group(1)
            if agent in proposals_made:
                proposals_made[agent] += 1
            else:
                proposals_made[agent] = 1
            if first_proposal_times["made"] is None:
                first_proposal_times["made"] = current_time

        # Extract proposals accepted by each agent
        elif "particle: ACCEPT" in message:
            agent = re.search(r"from: (\w+)", message).group(1)
            if agent in proposals_accepted:
                proposals_accepted[agent] += 1
            else:
                proposals_accepted[agent] = 1
            if first_proposal_times["accepted"] is None:
                first_proposal_times["accepted"] = current_time

        # Extract confirmed proposals and their deals
        elif "particle: CONFIRM" in message:
            proposals_confirmed += 1
            if first_proposal_times["confirmed"] is None:
                first_proposal_times["confirmed"] = current_time

            proposal_id = re.search(r"Proposal ID: (\w+)", message).group(1)
            if proposal_id not in unique_confirmed_proposals:
                unique_confirmed_proposals.add(proposal_id)
                deal = (
                    re.search(r"Proposed Deal: \[(.+)\]", message, re.DOTALL)
                    .group(1)
                    .strip()
                )
                deal_list = [item.strip() for item in deal.split(",")]
                deals_confirmed.append({"agent": proposal_id, "deal": deal_list})

    # Read the results from the results log file
    results = []
    with open(RESULTS_FILE, "r", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        for row in reader:
            agent = row["Agent"]
            before = int(row["Before"])
            after = int(row["After"])
            gain = after - before
            results.append(
                {"agent": agent, "before": before, "after": after, "gain": gain}
            )

    return {
        "proposals_made": proposals_made,
        "proposals_accepted": proposals_accepted,
        "proposals_confirmed": proposals_confirmed,
        "unique_confirmed_proposals": unique_confirmed_proposals,
        "deals_confirmed": deals_confirmed,
        "results": results,
        "first_proposal_times": first_proposal_times,
    }
